import { useMemo, useState } from 'react';
import Header from './components/Header.jsx';
import MealInput from './components/MealInput.jsx';
import SummaryCards from './components/SummaryCards.jsx';
import AIAssistant from './components/AIAssistant.jsx';
import Footer from './components/Footer.jsx';

const baseTotals = {
  calories: 0,
  protein: 0,
  fat: 0,
  carbs: 0,
  fiber: 0,
  sugar: 0
};

const suggestionTemplates = [
  {
    meal: '–ó–∞–≤—Ç—Ä–∞–∫',
    items: ['–û–≤—Å—è–Ω–∫–∞ —Å —è–≥–æ–¥–∞–º–∏', '–ì—Ä–µ—á–µ—Å–∫–∏–π –π–æ–≥—É—Ä—Ç', '–ó–µ–ª—ë–Ω—ã–π —á–∞–π']
  },
  {
    meal: '–ü–µ—Ä–µ–∫—É—Å',
    items: ['–Ø–±–ª–æ–∫–æ', '–ì–æ—Ä—Å—Ç—å –º–∏–Ω–¥–∞–ª—è']
  },
  {
    meal: '–û–±–µ–¥',
    items: ['–ö—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞ –Ω–∞ –≥—Ä–∏–ª–µ', '–ö–∏–Ω–æ–∞', '–°–∞–ª–∞—Ç –∏–∑ —à–ø–∏–Ω–∞—Ç–∞']
  },
  {
    meal: '–ü–æ–ª–¥–Ω–∏–∫',
    items: ['–¢–≤–æ—Ä–æ–≥ —Å —è–≥–æ–¥–∞–º–∏', '–ß–∞–π –º–∞—Ç—á–∞']
  },
  {
    meal: '–£–∂–∏–Ω',
    items: ['–õ–æ—Å–æ—Å—å –Ω–∞ –ø–∞—Ä—É', '–ê–≤–æ–∫–∞–¥–æ', '–û–≤–æ—â–∏ –Ω–∞ –ø–∞—Ä—É']
  }
];

const App = () => {
  const [entries, setEntries] = useState([]);
  const [totals, setTotals] = useState(baseTotals);
  const [analysis, setAnalysis] = useState([
    {
      icon: '‚ú®',
      title: '–î–æ–±–∞–≤—å –ø—Ä–æ–¥—É–∫—Ç—ã –∏ –Ω–∞–∂–º–∏ ¬´–ü–æ–¥—Å—á–∏—Ç–∞—Ç—å¬ª',
      description: '–ò–ò –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–≤–æ–π —Ä–∞—Ü–∏–æ–Ω –∏ –ø–æ–¥—Å–∫–∞–∂–µ—Ç, –∫–∞–∫ —Å–¥–µ–ª–∞—Ç—å –µ–≥–æ –µ—â—ë –ª—É—á—à–µ.'
    }
  ]);
  const [suggestedMenu, setSuggestedMenu] = useState(null);
  const [theme, setTheme] = useState('light');
  const [isAuthenticated, setIsAuthenticated] = useState(false);

  const mealBreakdown = useMemo(() => {
    const grouped = {};
    entries.forEach((entry) => {
      if (!grouped[entry.meal]) {
        grouped[entry.meal] = { ...baseTotals };
      }
      grouped[entry.meal].calories += entry.caloriesPerPortion;
      grouped[entry.meal].protein += entry.proteinPerPortion;
      grouped[entry.meal].fat += entry.fatPerPortion;
      grouped[entry.meal].carbs += entry.carbsPerPortion;
      grouped[entry.meal].fiber += entry.fiberPerPortion;
      grouped[entry.meal].sugar += entry.sugarPerPortion;
    });

    return Object.entries(grouped).map(([meal, values]) => ({ meal, ...values }));
  }, [entries]);

  const handleAddEntry = (food) => {
    const factor = food.quantity / 100;
    const entry = {
      ...food,
      caloriesPerPortion: food.calories * factor,
      proteinPerPortion: food.protein * factor,
      fatPerPortion: food.fat * factor,
      carbsPerPortion: food.carbs * factor,
      fiberPerPortion: (food.fiber || 0) * factor,
      sugarPerPortion: (food.sugar || 0) * factor
    };

    setEntries((prev) => [...prev, entry]);
  };

  const handleRemoveEntry = (index) => {
    setEntries((prev) => prev.filter((_, idx) => idx !== index));
  };

  const generateAnalysis = (newTotals) => {
    const messages = [];
    if (newTotals.calories === 0) {
      messages.push({
        icon: '‚ú®',
        title: '–î–æ–±–∞–≤—å –ø—Ä–æ–¥—É–∫—Ç—ã –∏ –Ω–∞–∂–º–∏ ¬´–ü–æ–¥—Å—á–∏—Ç–∞—Ç—å¬ª',
        description: '–ò–ò –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–≤–æ–π —Ä–∞—Ü–∏–æ–Ω –∏ –ø–æ–¥—Å–∫–∞–∂–µ—Ç, –∫–∞–∫ —Å–¥–µ–ª–∞—Ç—å –µ–≥–æ –µ—â—ë –ª—É—á—à–µ.'
      });
      return messages;
    }

    messages.push({
      icon: 'üìä',
      title: '–ë–∞–ª–∞–Ω—Å –∫–∞–ª–æ—Ä–∏–π',
      description: `–û–±—â–∞—è –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å: ${newTotals.calories.toFixed(0)} –∫–∫–∞–ª. –£–±–µ–¥–∏—Å—å, —á—Ç–æ —ç—Ç–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–≤–æ–µ–π —Ü–µ–ª–∏ –ø–æ –≤–µ—Å—É.`
    });

    const proteinRatio = newTotals.protein * 4;
    const fatRatio = newTotals.fat * 9;
    const carbRatio = newTotals.carbs * 4;
    const totalMacroCalories = proteinRatio + fatRatio + carbRatio;

    if (totalMacroCalories > 0) {
      const proteinPercent = (proteinRatio / totalMacroCalories) * 100;
      const fatPercent = (fatRatio / totalMacroCalories) * 100;
      const carbPercent = (carbRatio / totalMacroCalories) * 100;

      if (proteinPercent < 20) {
        messages.push({
          icon: 'üí™',
          title: '–î–æ–±–∞–≤—å –±–æ–ª—å—à–µ –±–µ–ª–∫–∞',
          description: '–ë–µ–ª–∫–∏ –ø–æ–º–æ–≥–∞—é—Ç –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å—Å—è –ø–æ—Å–ª–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç —á—É–≤—Å—Ç–≤–æ –Ω–∞—Å—ã—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π –≤–∫–ª—é—á–∏—Ç—å –∫—É—Ä–∏—Ü—É, —è–π—Ü–∞ –∏–ª–∏ –±–æ–±–æ–≤—ã–µ.'
        });
      } else {
        messages.push({
          icon: '‚úÖ',
          title: '–ë–∞–ª–∞–Ω—Å –±–µ–ª–∫–∞ –Ω–∞ —É—Ä–æ–≤–Ω–µ',
          description: '–î–æ–ª—è –±–µ–ª–∫–∞ –≤—ã–≥–ª—è–¥–∏—Ç –æ—Ç–ª–∏—á–Ω–æ. –ü—Ä–æ–¥–æ–ª–∂–∞–π –¥–µ—Ä–∂–∞—Ç—å —Ñ–æ–∫—É—Å –Ω–∞ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö.'
        });
      }

      if (fatPercent > 35) {
        messages.push({
          icon: 'ü•ë',
          title: '–ö–æ–Ω—Ç—Ä–æ–ª—å –∂–∏—Ä–æ–≤',
          description: '–ñ–∏—Ä—ã –≤–∞–∂–Ω—ã, –Ω–æ –ª—É—á—à–µ –≤—ã–±–∏—Ä–∞—Ç—å –ø–æ–ª–µ–∑–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏: –∞–≤–æ–∫–∞–¥–æ, —Ä—ã–±–∞, –æ—Ä–µ—Ö–∏. –ü–æ–ø—Ä–æ–±—É–π —É–º–µ–Ω—å—à–∏—Ç—å –∂–∞—Ä–µ–Ω—ã–µ –±–ª—é–¥–∞.'
        });
      }

      if (carbPercent > 55) {
        messages.push({
          icon: 'üç¨',
          title: '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–∞—Ö–∞—Ä–∞?',
          description: '–ü–æ—Ö–æ–∂–µ, —É–≥–ª–µ–≤–æ–¥—ã –ø—Ä–µ–æ–±–ª–∞–¥–∞—é—Ç. –°–¥–µ–ª–∞–π –∞–∫—Ü–µ–Ω—Ç –Ω–∞ —Å–ª–æ–∂–Ω—ã—Ö —É–≥–ª–µ–≤–æ–¥–∞—Ö –∏ –∫–ª–µ—Ç—á–∞—Ç–∫–µ, —á—Ç–æ–±—ã –¥–µ—Ä–∂–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å —ç–Ω–µ—Ä–≥–∏–∏ —Å—Ç–∞–±–∏–ª—å–Ω—ã–º.'
        });
      }
    }

    if (newTotals.fiber < 20) {
      messages.push({
        icon: 'ü•¶',
        title: '–î–æ–±–∞–≤—å –∫–ª–µ—Ç—á–∞—Ç–∫—É',
        description: '–¶–µ–ª—å ‚Äî 25‚Äì30 –≥ –∫–ª–µ—Ç—á–∞—Ç–∫–∏ –≤ –¥–µ–Ω—å. –í–∫–ª—é—á–∏ –±–æ–ª—å—à–µ –æ–≤–æ—â–µ–π, —è–≥–æ–¥ –∏ —Ü–µ–ª—å–Ω–æ–∑–µ—Ä–Ω–æ–≤—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤.'
      });
    } else {
      messages.push({
        icon: 'üåø',
        title: '–û—Ç–ª–∏—á–Ω–∞—è –∫–ª–µ—Ç—á–∞—Ç–∫–∞',
        description: '–¢–≤–æ–π —Ä–∞—Ü–∏–æ–Ω –±–æ–≥–∞—Ç –∫–ª–µ—Ç—á–∞—Ç–∫–æ–π ‚Äî —ç—Ç–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ –ñ–ö–¢ –∏ —Å—ã—Ç–æ—Å—Ç—å.'
      });
    }

    if (newTotals.sugar > 50) {
      messages.push({
        icon: '‚ö†Ô∏è',
        title: '–°–∞—Ö–∞—Ä–∞ –≤—ã—à–µ –Ω–æ—Ä–º—ã',
        description: '–°—Ç–∞—Ä–∞–π—Å—è –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π —Å–∞—Ö–∞—Ä –¥–æ 25‚Äì50 –≥ –≤ –¥–µ–Ω—å. –î–æ–±–∞–≤—å –±–æ–ª—å—à–µ —Ü–µ–ª—å–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏ –∏–∑–±–µ–≥–∞–π —Å–ª–∞–¥–∫–∏—Ö –Ω–∞–ø–∏—Ç–∫–æ–≤.'
      });
    }

    if (messages.length < 4) {
      messages.push({
        icon: 'üî•',
        title: '–ö—É—Ä—Å –Ω–∞ —ç–Ω–µ—Ä–≥–∏—é',
        description: '–†–∞—Ü–∏–æ–Ω –≤—ã–≥–ª—è–¥–∏—Ç —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ. –ú–æ–∂–Ω–æ —Å–ª–µ–≥–∫–∞ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Ä—Ü–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.'
      });
    }

    return messages;
  };

  const handleCalculate = () => {
    const newTotals = entries.reduce(
      (acc, entry) => ({
        calories: acc.calories + entry.caloriesPerPortion,
        protein: acc.protein + entry.proteinPerPortion,
        fat: acc.fat + entry.fatPerPortion,
        carbs: acc.carbs + entry.carbsPerPortion,
        fiber: acc.fiber + entry.fiberPerPortion,
        sugar: acc.sugar + entry.sugarPerPortion
      }),
      { ...baseTotals }
    );

    setTotals(newTotals);
    setAnalysis(generateAnalysis(newTotals));
  };

  const handleGenerateMenu = () => {
    const shuffled = [...suggestionTemplates].sort(() => Math.random() - 0.5);
    setSuggestedMenu(shuffled.slice(0, 4));
  };

  const handleAuth = () => {
    setIsAuthenticated(true);
  };

  const handleToggleTheme = () => {
    setTheme((prev) => (prev === 'light' ? 'dark' : 'light'));
  };

  return (
    <div className="relative min-h-screen bg-white text-slate-900 transition-colors duration-500 dark:bg-slate-950 dark:text-slate-50">
      <div className="pointer-events-none absolute inset-0 -z-10 bg-[radial-gradient(circle_at_top,rgba(30,167,253,0.15),transparent_55%)] opacity-80" />
      <Header
        onToggleTheme={handleToggleTheme}
        theme={theme}
        isAuthenticated={isAuthenticated}
        onAuth={handleAuth}
      />
      <main>
        <MealInput entries={entries} onAddEntry={handleAddEntry} onRemoveEntry={handleRemoveEntry} onCalculate={handleCalculate} />
        <SummaryCards totals={totals} mealBreakdown={mealBreakdown} />
        <AIAssistant analysis={analysis} onGenerateMenu={handleGenerateMenu} suggestedMenu={suggestedMenu} />
      </main>
      <Footer />
    </div>
  );
};

export default App;
